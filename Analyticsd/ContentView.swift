import SwiftUI

struct ContentView: View {
    @State var json = ""
    @State var jsonData: [(String,Any)] = []

    var body: some View {
        NavigationView {
            if !json.isEmpty {
                List {
                    NavigationLink("Tree", destination: TreeView(data: jsonData))
                    NavigationLink("Raw JSON", destination: ScrollView(.vertical, showsIndicators: true, content: {
                        Text(json)
                    }))
                }
            } else {
                Text("wait")
            }
        }
        .onAppear {
            json = analyticsJson()
            jsonData = (try! JSONSerialization.jsonObject(with: json.data(using: .utf8)!, options: []) as! [String:Any]).sorted { $0.key < $1.key }
        }
    }
}

struct TreeView: View {
    let data: [(String,Any)]

    var body: some View {
        List(data, id: \.0) { row in
            if let value = row.1 as? [String:Any] {
                NavigationLink(row.0, destination: TreeView(data: value.sorted { $0.key < $1.key }))
            } else if let value = row.1 as? [[String:Any]] {
                NavigationLink(row.0, destination:
                    List(Dictionary(grouping: value, by: { ($0["name"] as? String) ?? "no name" })
                            .sorted { $0.key < $1.key }, id: \.0) { row in
                        let messages = row.1.map { ($0["message"] as? [String:Any])?.sorted { $0.key < $1.key } ?? []}
                        NavigationLink(row.0, destination:
                            List {
                                ForEach(messages, id: \.description) { message in
                                    Section(content: {
                                        ForEach(message, id: \.key) { row in
                                            HStack {
                                                Text(row.0)
                                                Spacer()
                                                Text("\(row.1)" as String)
                                            }
                                        }
                                    })
                                }
                            }.listStyle(GroupedListStyle())
                        )
                    }
                )
            } else {
                HStack {
                    Text(row.0)
                    Spacer()
                    Text("\(row.1)" as String)
                }
            }
        }
    }
}

func analyticsJson() -> String {
    let connection = xpc_connection_create_mach_service("com.apple.analyticsd", nil, 2)
    xpc_connection_set_event_handler(connection, { _ in })
    xpc_connection_resume(connection)
    let xdict = xpc_dictionary_create(nil, nil, 0)
    xpc_dictionary_set_string(xdict, "command", "log-dump")
    let reply = xpc_connection_send_message_with_reply_sync(connection, xdict)
    return String(cString: xpc_dictionary_get_string(reply, "log-dump"))
}
